{
  "manifest": {
    "name": "pnotify",
    "version": "4.0.0",
    "description": "Beautiful dependency free notifications and prompts.",
    "keywords": [
      "notice",
      "notices",
      "notification",
      "notifications",
      "alert",
      "alerts",
      "web notifications",
      "prompts",
      "non blocking",
      "notify"
    ],
    "homepage": "https://github.com/sciactive/pnotify",
    "bugs": {
      "url": "https://github.com/sciactive/pnotify/issues"
    },
    "license": "Apache-2.0",
    "author": {
      "name": "Hunter Perrin"
    },
    "files": [
      "dist",
      "lib",
      "src",
      "make.js"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/sciactive/pnotify.git"
    },
    "scripts": {
      "build": "npm run build-iife && npm run build-umd && npm run build-es",
      "build-iife": "node make.js dist -- --format=iife",
      "build-umd": "node make.js dist -- --format=umd",
      "build-es": "node make.js dist -- --format=es",
      "prepare": "npm run lint && npm run build",
      "lint": "eslint index.html make.js src/*.html src/*.js demo/*"
    },
    "devDependencies": {
      "babel-core": "^6.26.3",
      "babel-plugin-add-module-exports": "^1.0.2",
      "babel-plugin-iife-wrap": "^1.1.0",
      "babel-plugin-transform-object-assign": "^6.22.0",
      "babel-preset-env": "^1.7.0",
      "babel-preset-stage-3": "^6.24.1",
      "clean-css": "^4.2.1",
      "eslint": "^5.16.0",
      "eslint-config-semistandard": "^13.0.0",
      "eslint-config-standard": "^12.0.0",
      "eslint-plugin-html": "^5.0.3",
      "eslint-plugin-import": "^2.17.2",
      "eslint-plugin-node": "^8.0.1",
      "eslint-plugin-promise": "^4.1.1",
      "eslint-plugin-react": "^7.12.4",
      "eslint-plugin-standard": "^4.0.0",
      "shelljs": "^0.8.3",
      "svelte": "^2.16.1",
      "uglify-es": "3.3.9",
      "uglify-js": "^3.5.7"
    },
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/builds/SiCKRAGE/sickrage/.yarn-cache/v6/npm-pnotify-4.0.0-22b29ae91f0f4727cb3caf137411d0e3777a8017-integrity/node_modules/pnotify/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm version](https://badge.fury.io/js/pnotify.svg)](https://www.npmjs.com/package/pnotify) [![Waffle.io - Columns and their card count](https://badge.waffle.io/sciactive/pnotify.svg?columns=all)](https://waffle.io/sciactive/pnotify) [![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/pnotify/badge?style=rounded)](https://www.jsdelivr.com/package/npm/pnotify)\n\nPNotify is a vanilla JavaScript notification and [confirmation/prompt](http://sciactive.com/pnotify/#confirm-module) library. PNotify can provide [desktop notifications](http://sciactive.com/pnotify/#web-notifications) based on the [Web Notifications spec](http://www.w3.org/TR/notifications/) with fall back to an in-browser notice.\n\n<h1>Demos</h1>\n\n* http://sciactive.com/pnotify/ for the latest release\n* https://sciactive.github.io/pnotify/ for what's in development\n\n<h1>Table of Contents</h1>\n\n<!-- TOC START min:1 max:3 link:true asterisk:false update:true -->\n- [Getting Started](#getting-started)\n  - [Migrating from PNotify 3](#migrating-from-pnotify-3)\n- [Installation](#installation)\n  - [Svelte](#svelte)\n  - [React](#react)\n  - [Angular](#angular)\n  - [Angular (Injectable)](#angular-injectable)\n  - [AngularJS](#angularjs)\n  - [Vanilla JS (ES5)](#vanilla-js-es5)\n  - [Vanilla JS (ES6)](#vanilla-js-es6)\n- [Styles](#styles)\n  - [Bright Theme](#bright-theme)\n  - [Material](#material)\n    - [Material Icons](#material-icons)\n  - [Bootstrap](#bootstrap)\n  - [Font Awesome (Icons)](#font-awesome-icons)\n- [Creating Notices](#creating-notices)\n- [Options](#options)\n  - [Changing Defaults](#changing-defaults)\n- [Module Options](#module-options)\n  - [Desktop Module](#desktop-module)\n  - [Buttons Module](#buttons-module)\n  - [NonBlock Module](#nonblock-module)\n  - [Mobile Module](#mobile-module)\n  - [Animate Module](#animate-module)\n  - [Confirm Module](#confirm-module)\n  - [History Module](#history-module)\n  - [Callbacks Module](#callbacks-module)\n- [Static Methods and Properties](#static-methods-and-properties)\n- [Instance Methods and Properties](#instance-methods-and-properties)\n  - [From the Svelte Component API](#from-the-svelte-component-api)\n  - [Events](#events)\n- [Stacks](#stacks)\n  - [Example Stack](#example-stack)\n- [Features](#features)\n- [Licensing and Additional Info](#licensing-and-additional-info)\n<!-- TOC END -->\n\n# Getting Started\n\nYou can get PNotify using NPM. (You can also use [jsDelivr](https://www.jsdelivr.com/package/npm/pnotify) or [UNPKG](https://unpkg.com/pnotify/).)\n\n```sh\nnpm install --save pnotify\n\n# If you plan to use Material style:\nnpm install --save material-design-icons\n\n# If you plan to use the Animate module:\nnpm install --save animate.css\n\n# If you plan to use the NonBlock module:\nnpm install --save nonblockjs\n```\n\nInside the pnotify module directory:\n\n* `src` Svelte components and uncompressed Bright Theme CSS.\n* `lib/es` uncompressed ECMAScript modules.\n* `lib/umd` uncompressed UMD modules.\n* `lib/iife` uncompressed IIFE scripts.\n* `dist` compressed Bright Theme CSS.\n* `dist/es` compressed ECMAScript modules.\n* `dist/umd` compressed UMD modules.liz\n* `dist/iife` compressed IIFE scripts.\n\n## [Migrating from PNotify 3](MIGRATING.md)\n\n# Installation\n\nIn addition to the JS, be sure to [include a PNotify style](#styles).\n\n## Svelte\n\n[PNotify in Svelte](https://codesandbox.io/s/nwoxqkvw6m). Import the Svelte files from `src`:\n\n```js\nimport PNotify from 'pnotify/src/PNotify.html';\nimport PNotifyButtons from 'pnotify/src/PNotifyButtons.html';\n\nPNotify.alert('Notice me, senpai!');\n```\n\n## React\n\n[PNotify in React](https://codesandbox.io/s/wwqzk8472w). Import the ES modules from `dist`:\n\n```js\nimport PNotify from 'pnotify/dist/es/PNotify';\nimport PNotifyButtons from 'pnotify/dist/es/PNotifyButtons';\n\nPNotify.alert('Notice me, senpai!');\n```\n\n## Angular\n\n[PNotify in Angular](https://codesandbox.io/s/l3pzkl64yq). Import the ES modules from `dist` and initiate the modules:\n\n```ts\nimport PNotify from 'pnotify/dist/es/PNotify';\nimport PNotifyButtons from 'pnotify/dist/es/PNotifyButtons';\n\n//...\nexport class WhateverComponent {\n  constructor() {\n    PNotifyButtons; // Initiate the module. Important!\n    PNotify.alert('Notice me, senpai!');\n  }\n}\n```\n\n<small>For IE support, see [this issue](https://github.com/sciactive/pnotify/issues/343).</small>\n\n## Angular (Injectable)\n\n[PNotify in Angular](https://codesandbox.io/s/17yr520yj) as an injectable service:\n\n```ts\n// pnotify.service.ts\nimport { Injectable } from '@angular/core';\nimport PNotify from 'pnotify/dist/es/PNotify';\nimport PNotifyButtons from 'pnotify/dist/es/PNotifyButtons';\n\n@Injectable()\nexport class PNotifyService {\n  getPNotify() {\n    PNotifyButtons; // Initiate the module. Important!\n    return PNotify;\n  }\n}\n\n// whatever.module.ts\n//...\nimport { PNotifyService } from './pnotify.service';\n@NgModule({\n  declarations: [...],\n  imports: [...],\n  providers: [PNotifyService],\n  bootstrap: [...]\n})\nexport class WhateverModule {}\n\n// whatever.component.ts\nimport { PNotifyService } from './pnotify.service';\n//...\nexport class WhateverComponent {\n  pnotify = undefined;\n  constructor(pnotifyService: PNotifyService) {\n    this.pnotify = pnotifyService.getPNotify();\n    this.pnotify.alert('Notice me, senpai!');\n  }\n}\n```\n\n## AngularJS\n\n[PNotify in AngularJS](https://codesandbox.io/s/o5mp55p2p9). Import the UMD modules from `dist`:\n\n```js\nvar angular = require('angular');\nvar PNotify = require('pnotify/dist/umd/PNotify');\nvar PNotifyButtons = require('pnotify/dist/umd/PNotifyButtons');\n\nangular.module('WhateverModule', [])\n  .value('PNotify', PNotify)\n  .controller('WhateverController', ['PNotify', function(PNotify) {\n    PNotify.alert('Notice me, senpai!');\n  }]);\n```\n\n## Vanilla JS (ES5)\n\nPNotify in vanilla ECMAScript 5. Include the IIFE scripts from `dist`:\n\n```html\n<script type=\"text/javascript\" src=\"node_modules/pnotify/dist/iife/PNotify.js\"></script>\n<script type=\"text/javascript\" src=\"node_modules/pnotify/dist/iife/PNotifyButtons.js\"></script>\n<script type=\"text/javascript\">\n  PNotify.alert('Notice me, senpai!');\n</script>\n```\n\n## Vanilla JS (ES6)\n\nPNotify in vanilla ECMAScript 6+. Include the ES modules from `dist`:\n\n```js\nimport PNotify from 'node_modules/pnotify/dist/es/PNotify.js';\nimport PNotifyButtons from 'node_modules/pnotify/dist/es/PNotifyButtons.js';\n\nPNotify.alert('Notice me, senpai!');\n```\n\n# Styles\n\n## Bright Theme\n\nThe default, standalone theme, Bright Theme. Include the CSS file in your page:\n\n```html\n<link href=\"node_modules/pnotify/dist/PNotifyBrightTheme.css\" rel=\"stylesheet\" type=\"text/css\" />\n```\n\n## Material\n\nThe Material Style module. Requires [material-design-icons](https://www.npmjs.com/package/material-design-icons). Include the module in your JS, and set it as the default:\n\n```js\nimport PNotifyStyleMaterial from 'pnotify/dist/es/PNotifyStyleMaterial.js';\n// or\nvar PNotifyStyleMaterial = require('pnotify/dist/umd/PNotifyStyleMaterial.js');\n\n// Set default styling.\nPNotify.defaults.styling = 'material';\n// This icon setting requires the Material Icons font. (See below.)\nPNotify.defaults.icons = 'material';\n```\n\n### Material Icons\n\nTo use the Material Style icons, include the Material Design Icons Font in your page.\n\n```sh\n# The official Google package:\nnpm install --save material-design-icons\n\n# OR, An unofficial package that only includes the font:\nnpm install --save material-design-icon-fonts\n```\n\n```html\n<link rel=\"stylesheet\" href=\"node_modules/material-design-icons/iconfont/material-icons.css\" />\n```\n\nAlternatively, you can use the Google Fonts CDN:\n\n```html\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Material+Icons\" />\n```\n\n## Bootstrap\n\nTo set Bootstrap as the default style, include the appropriate line(s) from below after you import PNotify:\n\n```js\nPNotify.defaults.styling = 'bootstrap3'; // Bootstrap version 3\nPNotify.defaults.icons = 'bootstrap3'; // glyphicons\n// or\nPNotify.defaults.styling = 'bootstrap4'; // Bootstrap version 4\n```\n\n## Font Awesome (Icons)\n\nTo set Font Awesome as the default icons, include the appropriate line from below after you import PNotify:\n\n```js\nPNotify.defaults.icons = 'fontawesome4'; // Font Awesome 4\n// or\nPNotify.defaults.icons = 'fontawesome5'; // Font Awesome 5\n```\n\n# Creating Notices\n\nTo make a notice, use the helper functions:\n\n```js\n// Manually set the type.\nPNotify.alert({\n  text: \"I'm an alert.\",\n  type: 'notice'\n});\n\n// Automatically set the type.\nPNotify.notice({\n  text: \"I'm a notice.\"\n});\nPNotify.info({\n  text: \"I'm an info message.\"\n});\nPNotify.success({\n  text: \"I'm a success message.\"\n});\nPNotify.error({\n  text: \"I'm an error message.\"\n});\n```\n\nOr you can manually create a new notice with Svelte's component API (if you know what you're doing):\n\n```js\nnew PNotify({\n  target: document.body,\n  data: {\n    text: \"I'm an alert.\",\n    type: 'notice'\n  }\n});\n```\n\n# Options\n\nPNotify options and default values.\n\n`PNotify.defaults = {`\n* `title: false`<br>\n  The notice's title.\n* `titleTrusted: false`<br>\n  Whether to trust the title or escape its contents. (Not allow HTML.)\n* `text: false`<br>\n  The notice's text.\n* `textTrusted: false`<br>\n  Whether to trust the text or escape its contents. (Not allow HTML.)\n* `styling: 'brighttheme'`<br>\n  What styling classes to use. (Can be 'brighttheme', 'bootstrap3', 'bootstrap4', or a styling object. See the source in PNotifyStyleMaterial.html for the properties in a style object.)\n* `icons: 'brighttheme'`<br>\n  What icons classes to use (Can be 'brighttheme', 'bootstrap3', 'fontawesome4', 'fontawesome5', or an icon object. See the source in PNotifyStyleMaterial.html for the properties in an icon object.)\n* `addClass: ''`<br>\n  Additional classes to be added to the notice. (For custom styling.)\n* `cornerClass: ''`<br>\n  Class to be added to the notice for corner styling.\n* `autoDisplay: true`<br>\n  Display the notice when it is created. Turn this off to add notifications to the history without displaying them.\n* `width: '360px'`<br>\n  Width of the notice.\n* `minHeight: '16px'`<br>\n  Minimum height of the notice. It will expand to fit content.\n* `type: 'notice'`<br>\n  Type of the notice. 'notice', 'info', 'success', or 'error'.\n* `icon: true`<br>\n  Set icon to true to use the default icon for the selected style/type, false for no icon, or a string for your own icon class.\n* `animation: 'fade'`<br>\n  The animation to use when displaying and hiding the notice. 'none' and 'fade' are supported through CSS. Others are supported through the Animate module and Animate.css.\n* `animateSpeed: 'normal'`<br>\n  Speed at which the notice animates in and out. 'slow', 'normal', or 'fast'. Respectively, 400ms, 250ms, 100ms.\n* `shadow: true`<br>\n  Display a drop shadow.\n* `hide: true`<br>\n  After a delay, close the notice.\n* `delay: 8000`<br>\n  Delay in milliseconds before the notice is closed.\n* `mouseReset: true`<br>\n  Reset the hide timer if the mouse moves over the notice.\n* `remove: true`<br>\n  Remove the notice's elements from the DOM after it is closed.\n* `destroy: true`<br>\n  Whether to remove the notice from the global array when it is closed.\n* `stack: PNotify.defaultStack`<br>\n  The stack on which the notices will be placed. Also controls the direction the notices stack.\n* `modules: {}`<br>\n  This is where options for modules should be defined.\n\n`}`\n\n```js\nPNotify.defaultStack = {\n  dir1: 'down',\n  dir2: 'left',\n  firstpos1: 25,\n  firstpos2: 25,\n  spacing1: 36,\n  spacing2: 36,\n  push: 'bottom',\n  context: document.body\n}\n```\n\n[Learn more about stacks.](#Stacks)\n\n## Changing Defaults\n\n```js\nPNotify.defaults.width = '400px';\n```\n\nChanging a default for modules can be done in a couple ways.\n\n```js\n// This will change the default for every notice, and is the recommended way.\nPNotify.modules.History.defaults.maxInStack = 10;\n\n// This will change the default only for notices that don't have a `modules` option.\nPNotify.defaults.modules = {\n  History: {\n    maxInStack: 10\n  }\n};\n```\n\n# Module Options\n\n## Desktop Module\n\n`Desktop: {`\n* `desktop: false`<br>\n  Display the notification as a desktop notification.\n* `fallback: true`<br>\n  If desktop notifications are not supported or allowed, fall back to a regular notice.\n* `icon: null`<br>\n  The URL of the icon to display. If false, no icon will show. If null, a default icon will show.\n* `tag: null`<br>\n  Using a tag lets you update an existing notice, or keep from duplicating notices between tabs. If you leave tag null, one will be generated, facilitating the `update` function.\n* `title: null`<br>\n  Optionally display a different title for the desktop.\n* `text: null`<br>\n  Optionally display different text for the desktop.\n* `options: {}`<br>\n  Any additional options to be passed to the Notification constructor.\n\n`}`\n\n## Buttons Module\n\n`Buttons: {`\n* `closer: true`<br>\n  Provide a button for the user to manually close the notice.\n* `closerHover: true`<br>\n  Only show the closer button on hover.\n* `sticker: true`<br>\n  Provide a button for the user to manually stick the notice.\n* `stickerHover: true`<br>\n  Only show the sticker button on hover.\n* `labels: {close: 'Close', stick: 'Stick', unstick: 'Unstick'}`<br>\n  Lets you change the displayed text, facilitating internationalization.\n* `classes: {closer: null, pinUp: null, pinDown: null}`<br>\n  The classes to use for button icons. Leave them null to use the classes from the styling you're using.\n\n`}`\n\n> :information_source: In v4, it's no longer possible to show closer/sticker buttons when the notice is nonblocking.\n\n## NonBlock Module\n\nRequires [NonBlock.js](https://github.com/sciactive/nonblockjs) 1.0.8 or higher.\n\n**It is also deprecated and unnecessary in v4.** All it does is add the 'nonblock' class to your notice. You can do the same yourself with `addClass: 'nonblock'`.\n\n`NonBlock: {`\n* `nonblock: false`<br>\n  Use NonBlock.js to create a non-blocking notice. It lets the user click elements underneath it.\n\n`}`\n\n## Mobile Module\n\n`Mobile: {`\n* `swipeDismiss: true`<br>\n  Let the user swipe the notice away.\n* `styling: true`<br>\n  Styles the notice to look good on mobile.\n\n`}`\n\n## Animate Module\n\nRequires [Animate.css](https://daneden.github.io/animate.css/).\n\n`Animate: {`\n* `animate: false`<br>\n  Use animate.css to animate the notice.\n* `inClass: ''`<br>\n  The class to use to animate the notice in.\n* `outClass: ''`<br>\n  The class to use to animate the notice out.\n\n`}`\n\nThe Animate module also creates a method, `attention`, on notices which accepts an attention grabber class and an animation completed callback.\n\n## Confirm Module\n\n`Confirm: {`\n* `confirm: false`<br>\n  Make a confirmation box.\n* `focus: null`<br>\n  For confirmation boxes, true means the first button or the button with promptTrigger will be focused, and null means focus will change only for modal notices. For prompts, true or null means focus the prompt. When false, focus will not change.\n* `prompt: false`<br>\n  Make a prompt.\n* `promptClass: ''`<br>\n  Classes to add to the input element of the prompt.\n* `promptValue: ''`<br>\n  The value of the prompt. (Note that this is two-way bound to the input.)\n* `promptMultiLine: false`<br>\n  Whether the prompt should accept multiple lines of text.\n* `align: 'right'`<br>\n  Where to align the buttons. (right, center, left, justify)\n\n```js\nbuttons: [\n  {\n    text: 'Ok',\n    textTrusted: false,\n    addClass: '',\n    primary: true,\n    // Whether to trigger this button when the user hits enter in a single line\n    // prompt. Also, focus the button if it is a modal prompt.\n    promptTrigger: true,\n    click: (notice, value) => {\n      notice.close();\n      notice.fire('pnotify.confirm', {notice, value});\n    }\n  },\n  {\n    text: 'Cancel',\n    textTrusted: false,\n    addClass: '',\n    click: (notice) => {\n      notice.close();\n      notice.fire('pnotify.cancel', {notice});\n    }\n  }\n]\n```\n* The buttons to display, and their callbacks. If a button has promptTrigger set to true, it will be triggered when the user hits enter in a prompt (unless they hold shift).\n\n`}`\n\nBecause the default buttons fire notice events on confirmation and cancellation, you can listen for them like this:\n\n```js\nconst notice = PNotify.alert({\n  title: 'Confirmation Needed',\n  text: 'Are you sure?',\n  hide: false,\n  modules: {\n    Confirm: {\n      confirm: true\n    }\n  }\n});\nnotice.on('pnotify.confirm', () => {\n  // User confirmed, continue here...\n});\nnotice.on('pnotify.cancel', () => {\n  // User canceled, continue here...\n});\n```\n\n## History Module\n\n`History: {`\n* `history: true`<br>\n  Place the notice in the history.\n* `maxInStack: Infinity`<br>\n  Maximum number of notices to have open in its stack.\n\n`}`\n\nThe History module also has two methods:\n\n* `PNotify.modules.History.showLast(stack)`<br>\n  Reopen the last closed notice from a stack that was placed in the history. If no stack is provided, it will use the default stack.\n* `PNotify.modules.History.showAll(stack)`<br>\n  Reopen all notices from a stack that were placed in the history. If no stack is provided, it will also use the default stack. If stack is `true`, it will reopen all notices from every stack.\n\n> :information_source: In v4, the History module can no longer make a dropdown for you. But hey, it's smaller now.\n\n## Callbacks Module\n\nThe callback options all expect the value to be a callback function. If the function returns false on the `beforeOpen` or `beforeClose` callback, that event will be canceled. `beforeInit` and `afterInit` will only work for notices created with the helper functions.\n\n`Callbacks: {`\n* `beforeInit`<br>\n  Called before the notice has been initialized. Given one argument, the options object.\n* `afterInit`<br>\n  Called after the notice has been initialized. Given one argument, the notice object.\n* `beforeOpen`<br>\n  Called before the notice opens. Given one argument, the notice object.\n* `afterOpen`<br>\n  Called after the notice opens. Given one argument, the notice object.\n* `beforeClose`<br>\n  Called before the notice closes. Given one argument, the notice object.\n* `afterClose`<br>\n  Called after the notice closes. Given one argument, the notice object.\n\n`}`\n\n# Static Methods and Properties\n\n* `PNotify.alert(options)`<br>\n  Create a notice.\n* `PNotify.notice(options)`<br>\n  Create a notice with 'notice' type.\n* `PNotify.info(options)`<br>\n  Create a notice with 'info' type.\n* `PNotify.success(options)`<br>\n  Create a notice with 'success' type.\n* `PNotify.error(options)`<br>\n  Create a notice with 'error' type.\n* `PNotify.closeAll()`<br>\n  Close all notices.\n* `PNotify.removeAll()`<br>\n  Alias for closeAll(). (Deprecated)\n* `PNotify.closeStack(stack)`<br>\n  Close all the notices in a stack.\n* `PNotify.removeStack(stack)`<br>\n  Alias for closeStack(stack). (Deprecated)\n* `PNotify.positionAll()`<br>\n  Reposition all notices.\n* `PNotify.VERSION`<br>\n  PNotify version number.\n* `PNotify.defaults`<br>\n  Defaults for options.\n* `PNotify.defaultStack`<br>\n  The default stack object.\n* `PNotify.notices`<br>\n  An array of all active notices.\n* `PNotify.modules`<br>\n  This object holds all the PNotify modules.\n* `PNotify.styling`<br>\n  Styling objects.\n\n# Instance Methods and Properties\n\n* `notice.open()`<br>\n  Open the notice.\n* `notice.close()`<br>\n  Close the notice.\n* `notice.remove()`<br>\n  Alias for close(). (Deprecated)\n* `notice.update(options)`<br>\n  Update the notice with new options.\n* `notice.addModuleClass(...classNames)`<br>\n  This is for modules to add classes to the notice.\n* `notice.removeModuleClass(...classNames)`<br>\n  This is for modules to remove classes from the notice.\n* `notice.hasModuleClass(...classNames)`<br>\n  This is for modules to test classes on the notice.\n* `notice.refs.elem`<br>\n  The notice's DOM element.\n* `notice.refs.container`<br>\n  The notice container DOM element.\n* `notice.refs.titleContainer`<br>\n  The title container DOM element.\n* `notice.refs.textContainer`<br>\n  The text container DOM element.\n* `notice.refs.iconContainer`<br>\n  The icon container DOM element.\n\n## From the [Svelte Component API](https://svelte.technology/guide#component-api)\n\n* `notice.get(option)`<br>\n  Get the value of an option.\n* `notice.set(options)`<br>\n  You probably want to use `update(options)` instead. It has some special PNotify secret sauce to make sure your notice doesn't break.\n* `notice.observe(key, callback[, options])`<br>\n  Observe an option. See the Svelte docs for more info.\n* `notice.destroy()`<br>\n  Removes the component from the DOM and any observers/event listeners. You probably want to use `close()` instead. It will animate the notice out and you can open it again. Once you destroy it, you can't open it again.\n\n## Events\n\n* `notice.on(eventName, callback)`<br>\n  Assign a callback to an event. Callback receives an `event` argument.\n* `notice.fire(eventName, event)`<br>\n  Fire an event.\n\n# Stacks\n\nA stack is an object used to determine where to position notices.\n\nStack properties:\n\n* `dir1`<br>\n  The primary stacking direction. Can be `'up'`, `'down'`, `'right'`, or `'left'`.\n* `firstpos1`<br>\n  Number of pixels from the edge of the context, relative to `dir1`, the first notice will appear. If undefined, the current position of the notice, whatever that is, will be used.\n* `spacing1`<br>\n  Number of pixels between notices along `dir1`. If undefined, `25` will be used.\n* `dir2`<br>\n  The secondary stacking direction. Should be a perpendicular direction to `dir1`. The notices will continue in this direction when they reach the edge of the viewport along `dir1`.\n* `firstpos2`<br>\n  Number of pixels from the edge of the context, relative to `dir2`, the first notice will appear. If undefined, the current position of the notice, whatever that is, will be used.\n* `spacing2`<br>\n  Number of pixels between notices along `dir2`. If undefined, `25` will be used.\n* `push`<br>\n  Where, in the stack, to push new notices. Can be `'top'` or `'bottom'`.\n* `modal`<br>\n  Whether to create a modal overlay when this stack's notices are open.\n* `overlayClose`<br>\n  Whether clicking on the modal overlay should close the stack's notices.\n* `context`<br>\n  The DOM element this stack's notices should appear in. If undefined, `document.body` will be used.\n\nStack behavior:\n\n* If there is no `dir1` property, the notice will be centered in the context.\n* If there is a `dir1` and no `dir2`, the notices will be centered along the axis of `dir1`.\n* The `firstpos*` values are relative to an edge determined by the corresponding `dir*` value.\n  * `dirX === 'up'` means `firstposX` is relative to the **bottom** edge.\n  * `dirX === 'down'` means `firstposX` is relative to the **top** edge.\n  * `dirX === 'left'` means `firstposX` is relative to the **right** edge.\n  * `dirX === 'right'` means `firstposX` is relative to the **left** edge.\n* Stacks are independent of each other, so a stack doesn't know and doesn't care if it overlaps (and blocks) another stack.\n* Stack objects are used and manipulated by PNotify, and therefore, should be a variable when passed.\n\n> :warning: Calling something like `PNotify.alert({text: 'notice', stack: {dir1: 'down', firstpos1: 25}});` may not do what you want. It will create a notice, but that notice will be in its own stack and will overlap other notices.\n\n## Example Stack\n\nHere is an example stack with comments to explain. You can play with it [here](https://codesandbox.io/s/2po6zq9yrr).\n\n```js\nconst stackBottomModal = {\n  dir1: 'up', // With a dir1 of 'up', the stacks will start appearing at the bottom.\n  // Without a `dir2`, this stack will be horizontally centered, since the `dir1` axis is vertical.\n  firstpos1: 25, // The notices will appear 25 pixels from the bottom of the context.\n  // Without a `spacing1`, this stack's notices will be placed 25 pixels apart.\n  push: 'top', // Each new notice will appear at the bottom of the screen, which is where the 'top' of the stack is. Other notices will be pushed up.\n  modal: true, // When a notice appears in this stack, a modal overlay will be created.\n  overlayClose: true, // When the user clicks on the overlay, all notices in this stack will be closed.\n  context: document.getElementById('page-container') // The notices will be placed in the 'page-container' element.\n};\n```\n\nIf you just want to position a single notice programmatically, and don't want to add any other notices into the stack, you can use something like this:\n\n```js\nPNotify.alert({\n  text: \"Notice that's positioned in its own stack.\",\n  stack: {\n    dir1: 'down', dir2: 'right', // Position from the top left corner.\n    firstpos1: 90, firstpos2: 90 // 90px from the top, 90px from the left.\n  }\n});\n```\n\n# Features\n\n* Rich graphical features and effects.\n  * Material, Bootstrap 3/4, Font Awesome 4/5, or the stand-alone theme, Bright Theme.\n  * Mobile styling and swipe support.\n  * Timed hiding.\n  * Slick animations with Animate.css.\n  * Attention getters with Animate.css.\n* Highly customizable UI.\n  * Sticky notices.\n  * Optional close and stick buttons.\n  * Non-blocking notices for less intrusive use.\n  * Notification types: notice, info, success, and error.\n  * Stacks allow notices to position together or independently.\n  * Control stack direction and push to top or bottom.\n  * Modal notices.\n  * Confirm dialogs, alert buttons, and prompts.\n  * RTL language support.\n* Feature rich API.\n  * Desktop notifications based on the Web Notifications standard.\n  * Dynamically update existing notices.\n  * Put forms and other HTML in notices.\n    * By default, escapes text to prevent XSS attack.\n  * Callbacks for lifespan events.\n  * Notice history for reshowing old notices.\n* Universally compatible.\n  * Works with any frontend library (React, Angular, Svelte, Vue, Ember, etc.).\n  * Works well with bundlers (Webpack, Rollup, etc.).\n  * No dependencies for most features.\n\n# Licensing and Additional Info\n\nCopyright 2009-2019 Hunter Perrin\nCopyright 2015 Google, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nSee http://sciactive.com/pnotify/ for more information, and demos.\n",
    "licenseText": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pnotify/-/pnotify-4.0.0.tgz#22b29ae91f0f4727cb3caf137411d0e3777a8017",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pnotify/-/pnotify-4.0.0.tgz",
    "hash": "22b29ae91f0f4727cb3caf137411d0e3777a8017",
    "integrity": "sha512-Fs3xlxmnlgXjUdM3xFfImfkLh5RmTgfRyPS5yT43w0OIrVULbGu1g3mpiH9H2nlAZ5dFEJRqh43sQXl/mVW6yA==",
    "registry": "npm",
    "packageName": "pnotify",
    "cacheIntegrity": "sha512-Fs3xlxmnlgXjUdM3xFfImfkLh5RmTgfRyPS5yT43w0OIrVULbGu1g3mpiH9H2nlAZ5dFEJRqh43sQXl/mVW6yA== sha1-IrKa6R8PRyfLPK8TdBHQ43d6gBc="
  },
  "registry": "npm",
  "hash": "22b29ae91f0f4727cb3caf137411d0e3777a8017"
}